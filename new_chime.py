# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Chime
                                 A QGIS plugin
 adding a reference
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Niranjan P
        email                : niranjanp.191cv138@nitk.edu.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox

from qgis.core import QgsProject,QgsFeature,QgsGeometry,QgsFeature,QgsPoint

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .new_chime_dialog import ChimeDialog
import os.path


class Chime:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Chime_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&new_chime')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Chime', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/new_chime/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'New chime plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&new_chime'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ChimeDialog()
            self.dlg.cmbAge.currentTextChanged.connect(self.evt_cmbAge_changed)

 #           QMessageBox.information(self.dlg,"Message","Should only run once")

#QMessageBox.information(self.dlg,"Message","Should run everytime")
        mc=self.iface.mapCanvas()
        self.dlg.spbLatitude.setValue(mc.center().y())
        self.dlg.spbLongitude.setValue(mc.center().x())
        self.dlg.dteLast.setDate(QDate.currentDate())

        map_layers = []
        for lyr in mc.layers():
            map_layers.append(lyr.name())
        QMessageBox.information(self.dlg,"Layers",str(map_layers))


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            lyrAFW=QgsProject.instance().mapLayersByName("Available_Fountain_Water")[0]
            lyrParks=QgsProject.instance().mapLayersByName("Escape_Vert")
            lyrTest=QgsProject.instance().mapLayersByName("Chime_initial")[0]
            lyrTest2=QgsProject.instance().mapLayersByName("Chime_Buffer")[0]
            idxAFWID=lyrAFW.fields().indexOf("ID")
            valAFWID=lyrAFW.maximumValue(idxAFWID)+1
            #QMessageBox.information(self.dlg,"Message","New Spot ID: {}".format(valAFWID))

            valLat=self.dlg.spbLatitude.value()
            valLng=self.dlg.spbLongitude.value()
            valAge=self.dlg.cmbAge.currentText()
            valBuffer=self.dlg.spbBuffer.value()
            valStatus=self.dlg.cmbStatus.currentText()
            valLast=self.dlg.dteLast.date()

            QMessageBox.information(self.dlg,"Message","Details entered :\nLatitude: {}\nLongitude:{}\nAge:{}\nBuffer:{}\nStatus:{}\nDate Entered:{}\n".format(valLat,valLng,valAge,valBuffer,valStatus,valLast))


            ftrAFW=QgsFeature(lyrTest.fields())
            ftrAFW.setAttribute("lat_y_dd",valLat)
            ftrAFW.setAttribute("lng_x_dd",valLng)
            ftrAFW.setAttribute("Age",valAge)
            ftrAFW.setAttribute("Buf_dist",valBuffer)
            ftrAFW.setAttribute("Status",valStatus)
            ftrAFW.setAttribute("Date",valLast)

            geom=QgsGeometry(QgsPoint(valLng,valLat))
            ftrAFW.setGeometry(geom)

            pr = lyrAFW.dataProvider()
            pr.addFeatures([ftrAFW])
            lyrAFW.reload()

            pr= lyrTest2.dataProvider()
            buffer=geom.buffer(valBuffer,20)
            ftrAFW.setGeometry(buffer)
            pr.addFeatures([ftrAFW])
            lyrTest2.reload()


            #QMessageBox.information(self.dlg,"Message","Should run if okay is clicked")
        #else:
          #  QMessageBox.information(self.dlg,"Message","Should run if dialogue button is closed")
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def evt_cmbAge_changed(self,age):
        if(age=="Infants"):
            self.dlg.spbBuffer.setValue(0.00315)

        elif age=="0-3 Years":
            self.dlg.spbBuffer.setValue(0.0054)

        elif age=="3-5 Years":
            self.dlg.spbBuffer.setValue(0.009)

        elif age=="8-13 Years":
            self.dlg.spbBuffer.setValue(0.022)
        else:
            pass


     